# Site
repository: sproogen/resume-theme
favicon: images/favicon.ico
 
# Content configuration version 
version: 2

# Personal info
name: Tae Yeon Hwang
title: Junior Web Developer
email: gxd0214@gmail.com
# website: https://github.com/BigHwangTaeYeon/bighwangtaeyeon.github.io

# Dark Mode (true/false/never)
darkmode: never
 
# Social links
github_username:  BigHwangTaeYeon
# linkedin_username: 태연-황-b42900281

# About Section
about_title: About Me
# about_profile_image: images/profile.jpg
about_content: | # this will include new lines to allow paragraphs
  중소기업에서 풀스택으로 웹 서비스를 개발/배포/운영을 담당했습니다. 주요 업무를 완료한 후, 제품의 개선이 필요한 부분을 최적화했습니다.<br>
  신기술을 배우고 비효율적인 부분을 개선하는 것을 좋아합니다. 비효율적인 배포 과정을 자동화하여 배포 시스템을 구축한 경험이 있습니다.

#  I am most skilled in: <mark>AWS</mark> and <mark>Eating Pizza</mark>

content:
  - title: Projects
    layout: list
    content:
      - layout: left
        title: 더픽트
        link: https://thepict.co.kr/
        sub_title: Junior BackEnd Developer
        caption: 2024.11 ~ 2025.02
        description: | # this will include new lines to allow paragraphs
          공공기관 SI/SM, 백엔드 개발/배포<br>
          LMS(학습 관리 시스템) 백엔드 개발 - 2024.11 - 2025.02
          기술스택 : Java 17, Spring boot, Jpa, Mybatis, MySQL, NCP(Naver Cloud), Git
        #     - URL : https://kdm.thepict.co.kr
        #     - 기술스택 : Java 17, Spring boot, Jpa, Mybatis, MySQL, NCP
        #     - Restful API 구현
        #     - 데이터베이스 설계
        #     - Zoom, 토스위젯 API 연동
        #     - 외부 API 토큰 관리
        #     - 외부 API 통신 원자성 보장
        #     - Partitioning
        #     - Monitor lock
        #     - 반정규화

        title: 제이케이데이터시스템즈
        link: https://archive.gugak.go.kr/
        sub_title: Junior Web Developer
        caption: 2023.04 ~ 2023.12
        description: | # this will include new lines to allow paragraphs
          국악원 아카이브 서비스/관리 시스템 개발/배포/운영<br>
          아카이브 시스템 담당
          기술스택 : Java 8, 전자정부 프레임워크, Mybatis, Cubrid
  #         <br><br>
  #         빌드 배포 자동화<br>
  #         프록시 파일 생성 시, 문제 식별 및 개선<br>
  #         전자계약서 솔루션 연계<br>
  # #          전자 계약서 연계, 운영 환경에서 NoSuchAlgorithmException 문제 해결<br>
  # #          전자정부 프레임워크, Cubrid 환경 개발 경험<br>
  #         검색엔진 뷰 테이블 분석<br>
  # #          공공데이터 품질관리 수준 평가<br>
  #         계약서 열람 및 다운로드 이력 AOP로 모듈화
  #         <br><br>
  #         기술 스택
  #           - Java, 전자정부 프레임워크, MyBatis, Cubrid
  #           - Jenkins, SVN
      # - title: 펌프킨
      #   # link: www.nhncloud.com/kr
      #   sub_title: Junior Web Developer
      #   caption: 2022.10 ~ 2023.02
      #   description: | # this will include new lines to allow paragraphs
      #     전기차 충전기 제조업체, 통합 관리 시스템 개발<br>
      #     인증카드, 요금 부가, 충전 이력 페이지 개발
      #     <br><br>
      #     기술 스택
      #       - Java, Spring, MS-SQL, MyBatis
            
  - title: Experience # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: Zoom API 토큰 관리
        # sub_title: Senior Network System Administrator
        # caption: November 2017 - Present
        # quote: >
        #   배포 시, FTP를 통해 class 파일을 직접 올리는 방식을 사용해왔습니다. 휴먼 에러와 개발 비용이 많이 소모되는 것을 확인했습니다.
        description: | # this will include new lines to allow paragraphs
            <mark>상황</mark> : Zoom API를 통해 Token을 생성하고 Room 생성 시, 해당 토큰을 전달해야합니다.<br>
              해당 토큰은 30분간 유효하며 재사용을 위해 어떻게 관리하는 것이 좋은 방법인지 고민이었습니다.<br>
            <mark>실행</mark> : SSD 보다 MEM에 관리하는 것이 좋다고 판단하였고,<br>
              토큰 필드 값들을 inner class로 설계하여 외부에서 변경이 불가능하며 정적으로 선언하여 메모리를 관리하며 재사용하였습니다.<br>
            <mark>결과</mark> : 데이터베이스 커넥션을 사용하지 않고, I/O 작업을 하지 않아도 토큰을 재사용할 수 있었습니다.
      - title: 외부 API 사용 시, 원자성 보장
        description: | # this will include new lines to allow paragraphs
            <mark>상황</mark> : 외부 API를 통해 연계작업을 하나의 트랜잭션 경계에 묶어 사용해도 원자성이 보장되지 않는 문제가 있었습니다.<br>
              외부 API를 통해 결제 취소를 하고 해당 결제 취소에 대한 정보를 받아 후 처리하는 작업에서 Exception 이 발생해도 결제 취소에 대한 롤백이 되지 않는 문제가 있었습니다<br>
            <mark>실행</mark> : 상태값에 대한 통신을 따로 구현할 수 없기에 예외 처리를 해당 결과값에 대해 따로 데이터베이스에 저장해 두는 방식으로 결정하였습니다<br>
            <mark>결과</mark> : 원자성 보장에 대한 처리가 되지는 않지만, 에외가 발생해도 이후에 대처가 가능하게 되었습니다.
      - title: Partition
        description: | # this will include new lines to allow paragraphs
            <mark>상황</mark> : 여러 강좌에 대한 정보를 노출시키고 하나의 강좌를 클릭하면 상세 페이지가 나옵니다.
              해당 강좌의 상세 내용은 기본 설명과 더불어 에디터를 사용하기에 많은 바이트를 사용하는 것으로 판단하였고 하나의 테이블에서 조회를 한다면 부담이 될 것이라 생각하였습니다.<br>
            <mark>실행</mark> : Partitioning을 통해 강좌 정보와 상세 페이지의 설명 등의 데이터를 분리하였습니다.<br>
            <mark>결과</mark> : 기본 20개 씩 불러오는 조건으로 TPS 는 70배, 응답시간은 3배 차이를 줄였습니다.
      - title: Monitor lock
        description: | # this will include new lines to allow paragraphs
            <mark>상황</mark> : 결제 요청 시, 수용인원에 대한 검증이 필요했습니다.<br>
              수용인원을 10명으로 지정하고 9명이 결제를 했을 때, 두 명이 같이 10번째 요청을 한다면 먼저 온 사람이 결제되고 그 다음 사람은 수용인원 검증으로 진행이 불가능하도록 Race Condition에 대응해야 했습니다.
            <mark>실행</mark> : 자바의 모니터를 활용하여 synchronized 블록을 생성하고, 수용인원을 가지고 있는 객체를 모니터 락으로 사용하여 비교 함으로써, race condition에 대응하였습니다.<br>
            <mark>결과</mark> : 결제 요청 건에 대한 검증이 어느 타이밍이나 순서로 인해서 결과에 영향을 주지 않도록 설계되었습니다.
      - title: 반정규화
        description: | # this will include new lines to allow paragraphs
            <mark>상황</mark> : 관리자가 하나의 프로젝트를 개설하고, 회원들이 팀을 꾸려 참여를 하는 기능이 있습니다. 어느 회원은 팀을 변경할 수도, 하나의 팀에서 리더가 될 수도 있습니다.
              관리자는 회원들의 여러 참가 요청의 Context(신청 상태, 팀, 리더)를 모두 선택하고 완료 버튼을 클릭하면 해당 회원들의 Context가 모두 반영됩니다.
              초기에 정규화를 통해 설계된것이 코드레벨에서 정리를 하다 보니 시간 복잡도 O(n^3)이 발생하고 오히려 더 많은 리소스가 사용되었습니다.<br>
            <mark>실행</mark> : project, subscription, team, member 로 나누어져 있던 것을 반정규화를 통해 project, member(subscription, team 포함)으로 변경하였습니다.<br>
            <mark>결과</mark> : 시간 복잡도는 O(n)으로 줄어들고 쿼리에서도 더욱 간펴해지고 많은 개발 비용이 줄어들었습니다.
      - title: 아키텍쳐 구조 변경
        description: | # this will include new lines to allow paragraphs
            <mark>상황</mark> : 기존 Layered 구조는 controller service serviceImpl dao 로 사용되어있었고 모든 비즈니스 로직은 controller 에 있으며 계층간에 역할 없이 구현되어있었습니다.<br>
            <mark>실행</mark> : 새로운 프로젝트를 진행하며 controller facade service repository interface(jpa,mybatis) 로 설계하였습니다.<br>
            Controller 는 Request 의 데이터를 가공하여 Facade 에 전달하고 Response 에 담길 객체를 가공하는 역할을 합니다.<br>
            Facade 는 서비스 계층에서 데이터를 가공한 값에 대해 재사용을 하기 위함이었습니다.<br>
            Service 는 비즈니스 로직이 작성되어있고<br>
            Repository 는 Jpa, MyBatis 를 같이 사용하기에 해당 Interface 에 맞게 조회할 데이터 가공이 필요할 때 사용됩니다.<br>
            Jpa 는 ORM 으로 객체지향 개발자에게 개발 비용을 낮출 수 있을 거라 판단하여 사용하였고, MyBatis 는 동적쿼리를 위해서 사용됩니다.<br>
            <mark>결과</mark> : 각 계층 별로 역할을 나누어 SRP 를 지켜낼 수 있었습니다.
      - title: 빌드 배포 자동화
        description: | # this will include new lines to allow paragraphs
            <mark>상황</mark> : 배포 시, FTP를 통해 class 파일을 직접 올리는 방식을 사용해왔습니다. 휴먼 에러와 개발 비용이 소모되는 것을 확인했습니다.<br>
            <mark>실행</mark> : 배포 자동화 도구인 Jenkins 를 통해 파이프라인을 구축했습니다. Stage는 빌드 - 백업 - 배포로 구성하였습니다.<br>
            <mark>결과</mark> : 빌드 에러를 젠킨스가 알려주고, 많은 시간과 휴먼 에러를 줄일 수 있었습니다.
      - title: 프록시 파일 생성 문제 식별 및 개선
        description: | # this will include new lines to allow paragraphs
            <mark>상황</mark> : 
              영상, 음향를 프록시 파일로 경량화하여 서비스합니다. 다수의 파일을 생성할 때 서버가 다운되는 문제가 발생했습니다.<br>
              setTimeOut으로 서버에서 상태값을 재요청하는 방식으로 동작합니다.<br>
              5개의 파일을 진행하면 5개의 상태값을 확인하고 5번 호출을 합니다. 이 과정에서 요청 횟수를 배수로 보내 과부하가 걸리는 것을 확인하였습니다.<br>
            <mark>실행</mark> : 
              1) 일단 상태값을 배열로 담아 한번의 요청만 보내는 것으로 수정하였습니다.<br>
              2) 실시간으로 빠른 리소스의 변경이 좋다 생각되여 polling에서 websocket 으로 개선하였습니다.<br>
            <mark>결과</mark> : 다수의 파일을 작업해도 정상적으로 프록시 파일을 생성하는 것을 확인하였습니다.
      - title: 전자계약서 솔루션 연계
        description: | # this will include new lines to allow paragraphs
            <mark>상황</mark> : 계약서를 수기로 작성하여 직접 올린던 것을 솔루션을 통해 자동으로 업로드하는 연계 작업을 진행하였습니다.<br>
            <mark>실행</mark> : 계약서 상태 값에 따른 이력 테이블, webhook 이력 테이블, 계약서 파일 테이블을 설계하였습니다. 상태값에 따른 데이터 저장은 스테이트 패턴으로 설계하였습니다. 단일 책임 원칙에 따라 파일 다운로드, 토큰 생성, 토큰 검증, 통신 기능의 Class를 분리하였습니다<br>
            <mark>결과</mark> : 전자계약서 상태값에 따라 webhook 이벤트로 정상적으로 테이블에 저장되고, 완료된 계약서 파일이 저장되었습니다.
      - title: JDK 환경 문제 해결
        description: | # this will include new lines to allow paragraphs
            <mark>상황</mark> : 솔루션 연계 작업을 로컬, 개발에서 테스트를 완료하고 운영 서버에 배포하였습니다. 업체에서 제공하는 코드 중 자바 라이브러리에서 ECKeyFactory not available 오류가 발생하였습니다.<br>
            <mark>실행</mark> : 운영환경은 OpenJDK, 개발 및 로컬은 OracleJDK 를 사용했고,<br>
              해당 라이브러리 구현체를 확인하며 OpenJDK 에서 사용하기 위해서는 팩토리 메서드 패턴으로 구현되어 있는 ECKeyFactory 인스턴스를 주입해줘야 했습니다.<br>
            <mark>결과</mark> : 썬 마이크로시스템즈가 오라클에 인수되며 sun 패키지가 제공되지 않는 것을 확인하고 Oracle에서도 사용을 추천하지 않는다는 것을 확인하게 되었습니다.

  - title: Side Projects
    layout: list
    content:
      - layout: left
        title: 멍모
        link: https://github.com/BigHwangTaeYeon/MungMo
        caption: 2024.06.21 ~ 2024.09.30
        quote: >
          견주 모임 서비스 개발 (백엔드 개발)
        description: | # this will include new lines to allow paragraphs
          Restful API 구현<br>
          MSA 아키텍쳐 구축<br>
          kafka connector(debezium)를 활용하여 cdc를 통해 데이터 동기화<br>
          Kafka를 활용한 채팅 서비스 메시지 디커플링<br>
          DDD(Domain Driven Design)<br>
          <br>
          기술 스택<br>
            Java, Spring Boot, Spring Cloud, WebSocket<br>
            MySQL, MongoDB, kafka
          <br><br>

          <mark>상황</mark> : 
            서비스간의 디커플링을 위해 데이터베이스를 분리하였고, 데이터 동기화가 필요했습니다.<br>
            또한 동기화를 통해 얻은 데이터로 모두 처리해도 될까? 라는 궁금증이 생겼습니다.<br>
          <mark>실행</mark> : 
            비동기, 분산처리, 스트리밍의 장점을 가진 카프카를 택하였고, 카프카 커넥터를 통해 동기화를 구축했습니다.<br>
            하지만 confluent로는 기존 데이터의 변경감지를 못하고 bulk는 오버헤드라 생각되어 debezium으로 설정하였습니다.<br>
            데이터 정합성이 중요한 로직에서는 FeignClient 를 이용해 통신을 하였습니다.<br>
          <mark>결과</mark> : 
            cdc를 통해 데이터를 동기화하여 다른 데이터베이스의 데이터를 가져올 수 있었고,<br>
            데이터 정합성이 중요한 매너 점수 연산에서 통신으로 데이터를 가져와서 처리하였습니다.<br>

          <mark>상황</mark> : 
            채팅 서비스의 메세지 처리를, 카프카를 통해 TPS를 높일 수 있다는 자료를 보게 되었습니다.<br>
            컨슘에서 메세지를 받고 로직처리는 스프링에서 동작하는데, 과연 자료의 결과대로 가져올지 궁금했습니다.<br>
          <mark>실행</mark> : 
            빠른 응답성이 필요한 메세지 출력은 웹소켓에서 처리하고, consumer가 메세지를 받으면 여러 로직을 처리할 수 있도록 구현하였습니다.<br>
            Jmeter로 부하테스트를 하면, 카프카 사용 시 180/s 미사용 시 187/s로 자료와 결과가 달라 전제조건을 다시 확인해봤지만 결과는 같았습니다.<br>
          <mark>결과</mark> : 
            그 자료는 이력서를 위한 가짜자료라는 것으로 확인되고, 카프카라는 작업을 거치기 때문에 미세한 차이로 더 낮은 성능을 보이는 것으로 이해했습니다.<br>
            결론은 디커플링을 위해 사용한다로 이해하고, 카프카를 통해 어드민 서비스에서 알람 처리로 마무리를 지었습니다.<br>

          <mark>상황</mark> : 
            유저 매너 점수를 반영하는 기능은 언제든 정책이 바뀌면 쉽게 반영될 수 있도록 설계가 필요했습니다.<br>
          <mark>실행</mark> : 
            확장성을 고려해서 추상화하여 기능을 구현하고, 도메인 비즈니스 로직의 기능과 객체와의 느슨한 결합도가 필요하여 바로 생각난 것이 Spring DI 였고,
            Factory Method Pattern 을 통해 클라이언트 객체와 느슨한 결합을 완성하였습니다.<br>
          <mark>결과</mark> : 
            정책이 변경이 되어도 추상화를 통해 새로운 구현체를 바로 생성할 수 있고, 클라이언트 객체가 아닌 팩토리에서 하나만 변경해주면 됩니다. 이로써 객체지향 설계원칙, OCP 를 지켜낼 수 있었습니다.<br>
            ![FactoryMethodPattern](./FactoryMethodPattern.jpg)

          <mark>상황</mark> : 
            서비스간 호출로 인한 순환참조 문제와 도메인 주도 설계의 계층별 의존성에 대한 문제를 알게되었습니다.<br>
          <mark>실행</mark> : 
            서비스간 호출은 파사드 패턴을 통해 클라이언트와 백엔드를 분리하였습니다.<br>
            의존성 문제는, 도메인과 인프라를 분리시키는 작업을 진행하였습니다.<br>
            어댑터를 생성하여, service 는 repository interface 를 의존하고 어댑터도 repository interface 를 의존하게 하였습니다.<br>
          <mark>결과</mark> : 
            파사드 패턴을 통해 클라이언트는 백엔드에게 제공할 오브젝트에만 집중하고, 백엔드는 비즈니스 로직에 집중할 수 있습니다.<br>
            컨트롤러, 서비스 계층의 코드도 간결해지고 객체에서 말하고자 하는 바를 명확히 이해할 수 있습니다.<br>
            그리고 도메인과 인프라를 분리시킴으로써 그 어댑터는 SpringDataJpa 등 어떤 인프라가 와도 교체 가능하도록 되었습니다.<br>

  - title: Skill # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: Backend
        description: |
            - Java, Spring Boot, Spring
            - Spring MVC, Spring Security, Spring Data JPA
            - Eclipse, Intellij
      - title: DevOps
        description: |
            - MySql
            - Jenkins, Git
      - title: Frontend
        description: |
            - JSP, Thymeleaf, Java Script
            
# Footer
footer_show_references: true
# references_title: References on request (Override references text)

# Build settings
remote_theme: sproogen/resume-theme

sass:
  sass_dir: _sass
  style: compressed

plugins:
 - jekyll-seo-tag
  